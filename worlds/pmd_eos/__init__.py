from typing import Listimport osimport jsonfrom .Items import EOS_item_table, EOSItemfrom .Locations import EOS_location_table, EOSLocationfrom .Options import EOSOptionsfrom .Rules import set_rulesfrom .Regions import EoS_regionsfrom BaseClasses import Tutorial, ItemClassification, Region, Locationfrom ..AutoWorld import World, WebWorldclass EOSWeb(WebWorld):    theme = "ocean"    game = "Pokemon Mystery Dungeon: Explorers of Sky"    tutorials = [Tutorial(        "Multiworld Setup Guide",        "A Guide to setting up Explorers of Sky for MultiWorld.",        "English",        "setup_en.md",        "setup/en",        ["CrypticMonkey33", "Chesyon"]    )]class EOSWorld(World):    """    This is for Pokemon Mystery Dungeon Explorers of Sky, a game where you inhabit a pokemon and explore through dungeons,    solve quests, and help out other Pokemon in the colony    """    game = "Pokemon Mystery Dungeon: Explorers of Sky"    options: EOSOptions    web = EOSWeb    item_name_to_id = {name: id.id for                       name, id in EOS_item_table.items()}    location_name_to_id = {item for                           item in EOS_location_table}    required_client_version = (0, 0, 0)    options_dataclass = EOSOptions    def generate_early(self) -> None:        test = 0    def create_regions(self) -> None:        main_region = Region("Overworld", self.player, self.multiworld)        self.multiworld.regions.append(main_region)        for location in EOS_location_table:            main_region.locations.append(EOSLocation(self.player, location.name, location.id, main_region))        boss_region = Region("Boss Room", self.player, self.multiworld)        boss_region.locations.append(EOSLocation(self.player, "Final Boss", None, boss_region))        main_region.connect(boss_region)#        test = 0    def create_item(self, name: str, classification: ItemClassification = None) -> EOSItem:        item_data = EOS_item_table        return EOSItem(name, classification or item_data.classification, self.item_name_to_id[name], self.player)    def create_items(self) -> None:        required_items: List[EOSItem] = []        filler_items: List[EOSItem] = []        for name, item in EOS_item_table.items():            if item.classification == ItemClassification.filler:                filler_items += self.create_item(name, ItemClassification.filler)            elif item.classification == ItemClassification.useful:                required_items += self.create_item(name, ItemClassification.useful)            else:                required_items += self.create_item(name, ItemClassification.progression)        self.multiworld.itempool += required_items    def set_rules(self) -> None:        test = 0        self.multiworld.completion_condition[self.player] = lambda state: state.has("Final Boss", self.player)